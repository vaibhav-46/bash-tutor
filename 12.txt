<brown>\t\t\t\t\tChapter 12-GREP</brown>
<red> 
In one of the previous chapters we had seen a little about grep.We now look in more detail at grep and its functionality.

Grep utility allows a user to search through a file for a pattern and returns customized information about where that pattern exists within the specified  file/standard input.
Usage:grep options pattern_to_search file_name1 file2 
<blue>
Before we start giving examples let us see some common options that are commonly used with grep:

<green>-n</green>--prints line number
<green>-c</green>--prints the number of times the pattern is found
<green>-v</green>--searches everything else except the pattern entered
<green>-i</green>--do not bother about the case in the pattern
<green>-o</green>--print only the mmatched part in the file
</blue>
Now that we have seen some options it is time for some examples:
<blue>
1.First try <green>grep -v bash /etc/passwd | grep -v nologin</green>.This command checks the users who are not using bash(the first part) but we also exclude those accounts with the nologin shell are not displayed.
2.<green>grep -c false /etc/passwd </green> gives the number of times the word false appears in /etc/passwd.
In use of grep the regex are very useful:we can now use all the regular expressions to print out the results.
3.<green> grep -n export ~/.bashrc | grep '\<PATH' </green> reads the bashrc file and displays PATH variable along with the line number of that line.This is a importamnt variable which we will cover later.
4.<green>grep [yf] /etc/group </green> dispplays all the lines containing y and f 
5.Now say you are solving a crossowrd and you need a 5 letter word starting with c and ending in h,you can even use the dictionary in ubuntu..outisde the chroot type <green> grep '\<c...h\>' /usr/share/dict/words </green> and this will display all the 5 letter words of the given type.Now crosswords are no problem..:).
Say we dont know the word-length then we can use <green> grep '\<c.*h\>' /usr/share/dict/words </green> to get all the required words.
6.Not only this regular expressions can also be used in the file names e.x try creating a directory with various text files in it and then search for a particular line in the directory using the command <green> grep pattern * </green> .* means every file in that directory and hence it searches all the files.

So now we have a tool that can help us search text files.But what if we want to edit the data?Isnt there anything similar to find and replace that can be used?Well there is a tool called sed(stream editor) that helps manipulate text.We will look at sed in the next chapter.
