<start><cyan>\t\t\t\tVariables</cyan>
<white>
A variable is nothing but a label,a name assigned to a location or set of locations in computer memory holding an item of data.Bash variables are untyped i.e you need not specify that the variable is a string or integer variable.Note that there are some variblea that are predefines by bash like
<blue>
1.COLUMNS 
2.PS1
3.PATH
</blue>Use the command <green> printenv </green> to see all the predefined variables.

There are two parts related with a variable:<blue>label and value </blue>.Well how do we distinguish between the two?.The name of the variable is the label and $variable_name is the value of it.For example let us say that we define a variable called var1 and initialize it as 
<green>var1=25</green>.
In that case the command <green> echo $var1 </green> gives the result 25 because thats the value stored in var1.startote that $variable is actually a simplified form of ${variable}.In contexts where the simplified syntax can cause error we use ${variable}

<green>Assignment</green>:One very important thing is that while assigning any variable there should not be any space before and after the "=' sign.We can assign the variables in various ways like:
<blue>
a=123
hello=$a
Also note that quoting(explained later) is also very importamt while assigning  variables to strings.

<green>export </green>: A variable crteated in a shell is only available to the current shell.It is a local variable:child processes of the current shell will not be aware of this variable.Try the following commands and see <green> 1.shell_name=bash 2.echo $shell_name 3.bash 4.echo $shell_name 5,exit </green>.You notice that in the child process the variable is unassigned(basically the variable is NULL).
In order to pass variables to a subshell,we need to export the variables using the export command.Typr in the command export shelll_name after assigning it and then do the same steps in order.Now the child process also recognizes the variable.Also note that changing the variable in the chils process doesnot change the variable in the parent.

<green>Positional Parameters</green>:Arguments passed to the script from the command line: $0 , $1 ,$2 .... $* and $@
<red>
$0:name of the script
$1:first argument
$2:second argument
${10}:10th argument(note the brackets for numbers>9)
$* and $@:all the positional parametrs
</red>This will be exensively used in the <green> if </green> command.

This is almost all that is important with varibles.In the next chapter we are going to cover something called as quoting.
</white>
</start>
